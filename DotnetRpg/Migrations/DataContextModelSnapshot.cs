// <auto-generated />
using System;
using DotnetRpg.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotnetRpg.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotnetRpg.Models.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BaseArmor")
                        .HasColumnType("int");

                    b.Property<int>("BaseResistance")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("CurrentEnergy")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int?>("FightId")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("InventorySize")
                        .HasColumnType("int");

                    b.Property<bool>("IsPlayerCharacter")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("Spirit")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("UnassignedAttributePoints")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FightId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("DotnetRpg.Models.Fights.Fight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Fights", (string)null);
                });

            modelBuilder.Entity("DotnetRpg.Models.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("Spirit")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Items", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DotnetRpg.Models.Skills.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseDamageAttributeScalingFactor")
                        .HasColumnType("int");

                    b.Property<int>("CharacterClass")
                        .HasColumnType("int");

                    b.Property<int>("Cooldown")
                        .HasColumnType("int");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnergyCost")
                        .HasColumnType("int");

                    b.Property<int>("Healing")
                        .HasColumnType("int");

                    b.Property<int>("MaxBaseDamageFactor")
                        .HasColumnType("int");

                    b.Property<int>("MinBaseDamageFactor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("StatusEffectId")
                        .HasColumnType("int");

                    b.Property<int>("TargetType")
                        .HasColumnType("int");

                    b.Property<int>("WeaponDamagePercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusEffectId")
                        .IsUnique()
                        .HasFilter("[StatusEffectId] IS NOT NULL");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("DotnetRpg.Models.Skills.SkillInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("RemainingCooldown")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillInstances", (string)null);
                });

            modelBuilder.Entity("DotnetRpg.Models.StatusEffects.StatusEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DecreasedDamagePercentage")
                        .HasColumnType("int");

                    b.Property<int>("DecreasedDamageTakenPercentage")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("IncreasedArmorPercentage")
                        .HasColumnType("int");

                    b.Property<int>("IncreasedDamagePercentage")
                        .HasColumnType("int");

                    b.Property<int>("IncreasedDamageTakenPercentage")
                        .HasColumnType("int");

                    b.Property<int>("IncreasedIntelligencePercentage")
                        .HasColumnType("int");

                    b.Property<int>("IncreasedResistancePercentage")
                        .HasColumnType("int");

                    b.Property<int>("IncreasedSpiritPercentage")
                        .HasColumnType("int");

                    b.Property<int>("IncreasedStrengthPercentage")
                        .HasColumnType("int");

                    b.Property<bool>("IsStunned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReducedArmorPercentage")
                        .HasColumnType("int");

                    b.Property<int>("ReducedIntelligencePercentage")
                        .HasColumnType("int");

                    b.Property<int>("ReducedResistancePercentage")
                        .HasColumnType("int");

                    b.Property<int>("ReducedSpiritPercentage")
                        .HasColumnType("int");

                    b.Property<int>("ReducedStrengthPercentage")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StatusEffects", (string)null);
                });

            modelBuilder.Entity("DotnetRpg.Models.StatusEffects.StatusEffectInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("RemainingDuration")
                        .HasColumnType("int");

                    b.Property<int>("StatusEffectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("StatusEffectId");

                    b.ToTable("StatusEffectInstances", (string)null);
                });

            modelBuilder.Entity("DotnetRpg.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DotnetRpg.Models.Items.ArmorPiece", b =>
                {
                    b.HasBaseType("DotnetRpg.Models.Items.Item");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("Resistance")
                        .HasColumnType("int");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("DotnetRpg.Models.Items.Weapon", b =>
                {
                    b.HasBaseType("DotnetRpg.Models.Items.Item");

                    b.Property<int>("MaxDamage")
                        .HasColumnType("int");

                    b.Property<int>("MinDamage")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DotnetRpg.Models.Characters.Character", b =>
                {
                    b.HasOne("DotnetRpg.Models.Fights.Fight", "Fight")
                        .WithMany("AllCharactersInFight")
                        .HasForeignKey("FightId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DotnetRpg.Models.Users.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotnetRpg.Models.Fights.Fight", b =>
                {
                    b.HasOne("DotnetRpg.Models.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DotnetRpg.Models.Items.Item", b =>
                {
                    b.HasOne("DotnetRpg.Models.Characters.Character", "Character")
                        .WithMany("Inventory")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DotnetRpg.Models.Skills.Skill", b =>
                {
                    b.HasOne("DotnetRpg.Models.StatusEffects.StatusEffect", "StatusEffect")
                        .WithOne()
                        .HasForeignKey("DotnetRpg.Models.Skills.Skill", "StatusEffectId");

                    b.Navigation("StatusEffect");
                });

            modelBuilder.Entity("DotnetRpg.Models.Skills.SkillInstance", b =>
                {
                    b.HasOne("DotnetRpg.Models.Characters.Character", "Character")
                        .WithMany("SkillInstances")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetRpg.Models.Skills.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DotnetRpg.Models.StatusEffects.StatusEffectInstance", b =>
                {
                    b.HasOne("DotnetRpg.Models.Characters.Character", "Character")
                        .WithMany("StatusEffectInstances")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetRpg.Models.StatusEffects.StatusEffect", "StatusEffect")
                        .WithMany()
                        .HasForeignKey("StatusEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("StatusEffect");
                });

            modelBuilder.Entity("DotnetRpg.Models.Characters.Character", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("SkillInstances");

                    b.Navigation("StatusEffectInstances");
                });

            modelBuilder.Entity("DotnetRpg.Models.Fights.Fight", b =>
                {
                    b.Navigation("AllCharactersInFight");
                });

            modelBuilder.Entity("DotnetRpg.Models.Users.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
